from st_card_component import card_component
import pandas as pd
import streamlit as st
import smtplib
import markdown
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from google.cloud import firestore

def get_email_body(timestamp, order, client, delivery):
    email_body = f"Bonjour\n\n" 
    email_body += f"Vous avez re√ßu une nouvelle commande !\n\n"
    email_body += f"Vous trouverez ci-dessous les d√©tails relatifs √† cette commande:\n\n"
    email_body += f"**Date et heure de la commande :** {timestamp.strftime('%m/%d/%Y, %H:%M')}\n\n"
    email_body += f"**Montant total de l'achat :** {order['Total'].sum():.2f} CHF\n\n"
    email_body += f"**Coordonn√©es du client et livraison :**\n\n"
    email_body += f"**Client :** {client['first_name']} {client['last_name']}\n\n"
    email_body += f"**T√©l√©phone :** {client['telephone']}\n\n"
    email_body += f"**Adresse email :** {client['email']}\n\n"
    email_body += f"**Adresse :** {client['adress']}, {client['city']}, {client['zip']}, {client['state']}\n\n"
    email_body += f"**Jour de livraison :** {delivery['schedule']}\n\n"
    email_body += f"**Instruction de livraison :** {delivery['instruction']}\n\n"
    if delivery["free_text"]:
        email_body += f"**Autre comentaire :** {delivery['free_text']}\n\n"
    
    email_body += "**Donn√©esde commande:**\n\n"
    email_body += order.to_html(index=False)
    email_body += "\n\n"

    if delivery["special_demand"]:
        email_body += f"**Instructions ou des demandes sp√©ciales :** {delivery['special_demand']}\n\n"
    else:
        email_body += f"**Instructions ou des demandes sp√©ciales : Aucun commentaire ou demande suppl√©mentaire**\n\n"
    

    email_body += "Il s'agit des produits et des donn√©es pour la nouvelle commande re√ßue. Si vous avez des questions ou des commentaires sur les produits, veuillez contacter directement le client par t√©l√©phone ou par courrier √©lectronique.\n\n"
    email_body += "Si la m√©thode de livraison consiste √† d√©poser le colis sans rencontre en personne, il serait gentil d'envoyer √©galement un SMS informant que vous avez d√©j√† effectu√© la livraison et l'envoyant au client pour qu'il paie par Twint.\n\n"
    email_body += "N'oubliez pas de laisser le nom et le pr√©nom du client visibles √† l'ext√©rieur de la bo√Æte ou du sac afin d'√©viter que le colis ne soit √©gar√©.\n\n"

    email_body += "Cordialement,\n\n"
    email_body += "Votre site March√© Local"
    
    return markdown.markdown(email_body)


def publish_list(published_products):
    quantities = {}
    for i, each in published_products.iterrows():
        id = each["ID"]
        name = each["Name"]
        description = "" if pd.isnull(each["Description"]) else each["Description"]
        category = each["Categories"]
        price = each["Regular price"]
        image_url = each["Images"]
        decorator = each["Mesure"]
        steps = each["Steps"]

        quantities[id] = card_component(
            name=name,
            description=description,
            category=category,
            price=price,
            image_url=image_url,
            decorator=decorator,
            steps=steps,
            key=i,
        )       
    return quantities  

def publish_panier(published_products, quantities):
    st.markdown(f"### Total panier")
    quantities_df = pd.DataFrame(quantities.values(), index=quantities.keys(), columns=["Quantit√©"])
    quantities_df = quantities_df.loc[quantities_df["Quantit√©"]>0, :]
    quantities_df = quantities_df.merge(published_products.set_index("ID")[["Name", "Regular price", "Mesure"]], left_index=True, right_index=True)
    quantities_df = quantities_df.rename(columns={"Name": "Produit", "Regular price": "Prix", "Mesure": "Mesure"})
    quantities_df.loc[quantities_df["Mesure"]=="gr", "Quantit√©"] = quantities_df.loc[quantities_df["Mesure"]=="gr", "Quantit√©"]/100
    quantities_df["Total"] = quantities_df["Prix"] * quantities_df["Quantit√©"]
    quantities_df = quantities_df[["Produit", "Prix", "Quantit√©", "Mesure", "Total"]]
    st.dataframe(quantities_df.reset_index(drop=True).style.format(subset=["Prix","Quantit√©","Total"]), use_container_width=True)

    total_panier = quantities_df["Total"].sum()
    st.markdown(f"### R√©sum√© de la commande")
    st.markdown(f'''
                |Total| CHF {total_panier:.2f}|
                | :-------- | :------- |
                | Articles  | CHF {total_panier:.2f}    |
                | Livraison | CHF 0.00     |
                | Taxes    | CHF 0.00    |
                ''')
    st.write("\n")
    return quantities_df

def get_delivery_options():
    delivery_dict = {}
    st.markdown(f"### Ajouter une note pour des intructions et demandes sp√©ciales.")
    st.markdown(f"Il y a possibilit√© de faire des demandes pour des produits ne figurants pas sur la liste et nous ferons de notre mieux pour y satisfaire.")
    delivery_dict["special_demand"] = st.text_area(placeholder="Ajoutez des instructions ou des demandes sp√©cialles ici",label="Instructions", label_visibility="collapsed")
    st.markdown(f"### Jour et p√©riode de livraison gratuite")
    delivery_dict["schedule"] = st.radio(label="delivery_schedule", options=["Mardi matin suivant (vers 4h30, avant l'heure de d√©but du march√©)", "Mardi prochain √† la mi-journ√©e", "Jeudi matin suivant (entre 7h00 et 8h30)"], label_visibility="collapsed")
    st.markdown(f"### Instruction de livraison")
    st.markdown("Veuilliz indiquer ci-dessous comment vous pr√©f√©rez recevoir votre commande")
    delivery_dict["instruction"] = st.radio(label="livraison", label_visibility="collapsed",
                                                options=["En haut de la bo√Æte aux lettres", 
                                                        "A c√¥t√© de la porte d'entr√©e (√† l'ext√©rieur)",
                                                        "A c√¥t√© de la porte d'entr√©e (√† l'int√©rieur)",
                                                        "Sonnez √† l'interphone",
                                                        "Autre (indiquer ci-dessous)"])
    delivery_dict["free_text"] = st.text_input(label="autre_option", label_visibility="collapsed")
    return delivery_dict

def get_client_info():
    client_dict = {}
    row_1 = st.columns(2)
    row_1[0].text("Pr√©nom")
    client_dict["first_name"] = row_1[1].text_input(label="Pr√©nom", label_visibility="collapsed")
    
    row_2 = st.columns(2)
    row_2[0].text("Nom")
    client_dict["last_name"] = row_2[1].text_input(label="Nom de famille", label_visibility="collapsed")

    row_3 = st.columns(2)
    row_3[0].text("T√©l√©phone")
    client_dict["telephone"] = row_3[1].text_input(label="T√©l√©phone", label_visibility="collapsed")

    row_4 = st.columns(2)
    row_4[0].text("E-mail pour confirmer la commande")
    client_dict["email"] = row_4[1].text_input(label="E-mail pour confirmer la commande", label_visibility="collapsed")

    row_5 = st.columns(2)
    row_5[0].text("Adresse")
    client_dict["adress"] = row_5[1].text_input(label="Adresse", label_visibility="collapsed")

    row_6 = st.columns(2)
    row_6[0].text("Ville")
    client_dict["city"] = row_6[1].text_input(label="Ville", label_visibility="collapsed")

    row_7 = st.columns(2)
    row_7[0].text("Code postal")
    client_dict["zip"] = row_7[1].text_input(label="Code postal", label_visibility="collapsed")

    row_8 = st.columns(2)
    row_8[0].text("R√©gion")
    row_8[1].text("Fribourg")
    client_dict["state"] = "Fribourg"

    row_9 = st.columns(2)
    row_9[0].text("Pays")
    row_9[1].text("Suisse")
    client_dict["country"] = "Suisse"
    return client_dict

def save_document_in_db(timestamp, order, client, delivery):
    db = firestore.Client.from_service_account_info(st.secrets["firebase"])
    print(timestamp)
    print(order["Total"].sum())
    print(order["Quantit√©"].sum())
    print(client)
    print(delivery)
    print(order.to_dict(orient="records"))
    order_document = {"timestamp": timestamp, 
                      "order_price": order["Total"].sum(), 
                      "order_n_products": order["Quantit√©"].sum(), 
                      "client": client, 
                      "order": order.to_dict(orient="records"), 
                      "delivery": delivery}
    db.collection("orders").add(order_document)


def send_email_to_farmer(timestamp, order, client, delivery):
    email_sender = st.secrets["email"]["from"]
    email_receiver = client["email"]
    email_body = get_email_body(timestamp, order, client, delivery)
    subject = "Marche local: vous avez une nouvelle commande"
    password = st.secrets["email"]["password"]
    part1 = MIMEText(email_body, 'plain')
    part2 = MIMEText(email_body, 'html')
    try:
        msg = MIMEMultipart('alternative')
        msg.attach(part1)
        msg.attach(part2)
        msg['From'] = email_sender
        msg['To'] = email_receiver
        msg['Subject'] = subject
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(email_sender, password)
        server.sendmail(email_sender, email_receiver, msg.as_string())
        server.quit()

        st.success('Order sent successfully! üöÄ')
        st.balloons()

    except Exception as e:
        st.error(f"Error: {e}")